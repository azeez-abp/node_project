ssh-keygen -t ed25519 -C "adioblessa@gmail.com"
git config --local --add core.sshCommand "ssh -i ~/Desktop/Code-project/python_api/key2"
git config --local --list
git config --local --unset core.sshCommand
git branch savepath
git checkout savepath
git rebase savepath
node --experimental-modules --es-module-specifier-resolution=node yourScript.js

insatll babel for es6 to es5 transpilling
npm install @babel/core @babel/preset-env --save-dev
inside .babelrc file:
{
  "presets": ["@babel/preset-env"],
  "plugins": ["@babel/plugin-transform-runtime"]
}

Note that starting from Babel 7, the .babelrc file has been deprecated in 
favor of using the babel.config.json (or babel.config.js) file for configuration

nino for chat
redux toolkit for state   management
redux query for query

cd node_project/backend | npm run dev
cd node_project/frontend | npm start





createSlice and createAsyncThunk APIs

createApi()
fetchBaseQuery()
baseQuery()

 imposter syndrome is
feeling of frauduent

our ideas and skills are not worthy of other’s attention


A nagging doubt that you haven’t really earned your accomplishment


/////zworkin g with differnce session /////////////////////////////
const MongoStore = require('connect-mongo');
app.use(
  session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: false,
    store: MongoStore.create({ mongoUrl: 'mongodb://localhost/myapp' }),
  })
);



npm install session-file-store
const FileStore = require('session-file-store')(session);
app.use(
  session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: false,
    store: new FileStore({
      path: '/path/to/session/files',
      encrypt: true,
    }),
  })
);

app.use(passport.initialize());
app.use(passport.session());

///////////////////////////////
for mysql
const session = require('express-session');
const MySQLStore = require('express-mysql-session')(session);
const mysql = require('mysql2');

const connection = mysql.createConnection({
  host: 'localhost',
  user: 'your-username',
  password: 'your-password',
  database: 'your-database',
});

const sessionStore = new MySQLStore({
  clearExpired: true,
  checkExpirationInterval: 900000, // 15 minutes
  expiration: 86400000, // 1 day
  createDatabaseTable: true,
  connection: connection,
});


app.use(
  session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: false,
    store: sessionStore,
  })
);



/////////////////working with differnce cookie//////////////
app.get('/set-cookie', (req, res) => {
  res.setHeader('Set-Cookie', 'cookieName=cookieValue; Path=/; Max-Age=3600');
  res.send('Cookie set successfully');
});





https://www.essentialdeveloper.com/ios-architect-crash-course/july-2023-c5e7#1